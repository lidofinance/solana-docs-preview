"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1440],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>f});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(a),f=o,b=u["".concat(c,".").concat(f)]||u[f]||p[f]||r;return a?n.createElement(b,i(i({ref:t},d),{},{components:a})):n.createElement(b,i({ref:t},d))}));function f(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8473:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var n=a(7462),o=(a(7294),a(3905));const r={title:"balance",description:"Specification of the balance.rs module",keywords:["development","developers","lido","specification","intent","balance","solido","solana"],sidebar_position:4},i="Balance",l={unversionedId:"development/specification/solido/balance",id:"development/specification/solido/balance",title:"balance",description:"Specification of the balance.rs module",source:"@site/docs/development/specification/solido/balance.md",sourceDirName:"development/specification/solido",slug:"/development/specification/solido/balance",permalink:"/solana-docs-preview/development/specification/solido/balance",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"balance",description:"Specification of the balance.rs module",keywords:["development","developers","lido","specification","intent","balance","solido","solana"],sidebar_position:4},sidebar:"solidoSidebar",previous:{title:"solido",permalink:"/solana-docs-preview/development/specification/solido/"},next:{title:"entrypoint",permalink:"/solana-docs-preview/development/specification/solido/entrypoint"}},c={},s=[{value:"Functions",id:"functions",level:2},{value:"get_target_balance",id:"get_target_balance",level:3},{value:"get_validator_furthest_below_target",id:"get_validator_furthest_below_target",level:3}],d={toc:s};function p(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"balance"},"Balance"),(0,o.kt)("p",null,"The purpose of this module is to hold functionality that assists with calculating target balances associated with validators."),(0,o.kt)("h2",{id:"functions"},"Functions"),(0,o.kt)("p",null,"There are two functions within this module; one that is intended to get the ideal target balance for each validator and the second to get the validator that is the furthest below the ideal target balance along with its current balance."),(0,o.kt)("h3",{id:"get_target_balance"},"get_target_balance"),(0,o.kt)("p",null,"The intent of the get_target_balance function is to compare the current validator stake account balance to the ideal target balance of validators after any lamports that have not been delegated are taken into account.  The balances of the active validators is then updated to the target balance in a uniform fashion.  Any remainder due to rounding is also distributed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn get_target_balance(\n    undelegated_lamports: Lamports,\n    validators: &Validators,\n    target_balance: &mut [Lamports],\n) -> Result<(), LidoError> {\n")),(0,o.kt)("h3",{id:"get_validator_furthest_below_target"},"get_validator_furthest_below_target"),(0,o.kt)("p",null,"The intent of the get_validator_furthest_below_target function is to find the index and amount of the validator that is furthest from the ideal target balance."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn get_validator_furthest_below_target(\n    validators: &Validators,\n    target_balance: &[Lamports],\n) -> (usize, Lamports) {\n")))}p.isMDXComponent=!0}}]);